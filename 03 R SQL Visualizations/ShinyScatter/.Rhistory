labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS where CO2_G_MI_ is not null Where RATED_HORSEPOWER_ < 100"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', verbose = TRUE))))
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title="PLOT 1") +
labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS where CO2_G_MI_ is not null Where RATED_HORSEPOWER < 100"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', verbose = TRUE))))
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title="PLOT 1") +
labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS where CO2_G_MI_ is not null Where RATED_HORSEPOWER_ < 100"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', verbose = TRUE))))
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title="PLOT 1") +
labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE  )),
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# Start your code here.
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
Rated_Horsepower_value = input$KPI1
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS where CO2_G_MI_ is not null and RATED_HORSEPOWER <"p1" ')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=Rated_Horsepower_value), verbose = TRUE)))
plot<- ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title="PLOT 1") +
labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE  )),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
return(plot)
}) # output$distPlot
})
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# Start your code here.
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
Rated_Horsepower_value = input$KPI1
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS where CO2_G_MI_ is not null and RATED_HORSEPOWER <"p1" ')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=Rated_Horsepower_value), verbose = TRUE)))
plot<- ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title="PLOT 1") +
labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE  )),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
return(plot)
}) # output$distPlot
})
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS where CO2_G_MI_ is not null"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', verbose = TRUE))))
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title="PLOT 1") +
labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# Start your code here.
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
Rated_Horsepower_value = input$KPI1
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS where CO2_G_MI_ is not null and RATED_HORSEPOWER <"p1" ')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=Rated_Horsepower_value), verbose = TRUE)))
plot<- ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title="PLOT 1") +
labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE  )),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
return(plot)
}) # output$distPlot
})
shiny::runApp()
library("shiny", lib.loc="~/R/win-library/3.2")
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# Start your code here.
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
Rated_Horsepower_value = input$KPI1
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS where CO2_G_MI_ is not null and RATED_HORSEPOWER <"p1" ')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=Rated_Horsepower_value), verbose = TRUE)))
plot<- ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title="PLOT 1") +
labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE  )),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
return(plot)
}) # output$distPlot
})
plot<- ggplot() +
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# Start your code here.
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
Rated_Horsepower_value = input$KPI1
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS where CO2_G_MI_ is not null and RATED_HORSEPOWER <"p1" ')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=Rated_Horsepower_value), verbose = TRUE)))
plot<- ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title="PLOT 1") +
labs(x="RATED HORSEPOWER", y="CO2 G MI", color="VEHICLE TYPE") +
layer(data=car ,
mapping=aes(x=as.numeric(RATED_HORSEPOWER), y=as.numeric(CO2_G_MI_), color = as.character(VEHICLE_TYPE  )),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.0, height=0)
)
return(plot)
}) # output$distPlot
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/DataVisualization/DataVisualization/RWorkshop/09 Shiny/03Crosstab')
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON' ), verbose = TRUE)));
# df <- car %>% group_by(VEHICLE_MANUFACTURER_NAME) %>% summarize(sum(RATED_HORSEPOWER))
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
#View(df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title="Horsepower by Manufactuer") +
labs(x="Vehicle Manufacturer Name", y="Rated Horsepower") +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
#  geom_text(data=car, label=(RATED_HORSEPOWER), angle=90) + # Still can't get the labels right
layer(data=car ,
mapping=aes(x=as.character(VEHICLE_MANUFACTURER_NAME), y=as.numeric(RATED_HORSEPOWER)), # Find out how to aggregate the horsepower by manufacturer name into averages
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue")
) +
#   layer (data=car,
#     mapping=aes(x=VEHICLE_MANUFACTURER_NAME, y=RATED_HORSEPOWER, label=RATED_HORSEPOWER),
#     stat="identity",
#     stat_params=list(colour="black"),
#     geom="text",
#     geom_params=list(angle=90),
#   )+
layer(data=df,
mapping=aes(yintercept = 32808, label="Average"),
geom="hline",
geom_params=list(colour="red")
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON' ), verbose = TRUE)));
# df <- car %>% group_by(VEHICLE_MANUFACTURER_NAME) %>% summarize(sum(RATED_HORSEPOWER))
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
#View(df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title="Horsepower by Manufactuer") +
labs(x="Vehicle Manufacturer Name", y="Rated Horsepower") +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
#  geom_text(data=car, label=(RATED_HORSEPOWER), angle=90) + # Still can't get the labels right
layer(data=car ,
mapping=aes(x=as.character(VEHICLE_MANUFACTURER_NAME), y=as.numeric(RATED_HORSEPOWER)), # Find out how to aggregate the horsepower by manufacturer name into averages
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue")
) +
#   layer (data=car,
#     mapping=aes(x=VEHICLE_MANUFACTURER_NAME, y=RATED_HORSEPOWER, label=RATED_HORSEPOWER),
#     stat="identity",
#     stat_params=list(colour="black"),
#     geom="text",
#     geom_params=list(angle=90),
#   )+
layer(data=df,
mapping=aes(yintercept = 32808, label="Average"),
geom="hline",
geom_params=list(colour="red")
)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title="Horsepower by Manufactuer") +
labs(x="Vehicle Manufacturer Name", y="Rated Horsepower") +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
#  geom_text(data=car, label=(RATED_HORSEPOWER), angle=90) + # Still can't get the labels right
layer(data=car ,
mapping=aes(x=as.character(VEHICLE_MANUFACTURER_NAME), y=as.numeric(RATED_HORSEPOWER)), # Find out how to aggregate the horsepower by manufacturer name into averages
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue")
) +
#   layer (data=car,
#     mapping=aes(x=VEHICLE_MANUFACTURER_NAME, y=RATED_HORSEPOWER, label=RATED_HORSEPOWER),
#     stat="identity",
#     stat_params=list(colour="black"),
#     geom="text",
#     geom_params=list(angle=90),
#   )+
layer(data=df,
mapping=aes(yintercept = 32808, label="Average"),
geom="hline",
geom_params=list(colour="red")
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON' ), verbose = TRUE)));
# df <- car %>% group_by(VEHICLE_MANUFACTURER_NAME) %>% summarize(sum(RATED_HORSEPOWER))
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
#View(df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title="Horsepower by Manufactuer") +
labs(x="Vehicle Manufacturer Name", y="Rated Horsepower") +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
#  geom_text(data=car, label=(RATED_HORSEPOWER), angle=90) + # Still can't get the labels right
layer(data=car ,
mapping=aes(x=as.character(VEHICLE_MANUFACTURER_NAME), y=as.numeric(RATED_HORSEPOWER)), # Find out how to aggregate the horsepower by manufacturer name into averages
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue")
) +
layer(data=df,
mapping=aes(yintercept = 32808, label="Average"),
geom="hline",
geom_params=list(colour="red")
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON' ), verbose = TRUE)));
# df <- car %>% group_by(VEHICLE_MANUFACTURER_NAME) %>% summarize(sum(RATED_HORSEPOWER))
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
#View(df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title="Horsepower by Manufactuer") +
labs(x="Vehicle Manufacturer Name", y="Rated Horsepower") +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
#  geom_text(data=car, label=(RATED_HORSEPOWER), angle=90) + # Still can't get the labels right
layer(data=car ,
mapping=aes(x=as.character(VEHICLE_MANUFACTURER_NAME), y=as.numeric(RATED_HORSEPOWER)), # Find out how to aggregate the horsepower by manufacturer name into averages
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue")
) +
#   layer (data=car,
#     mapping=aes(x=VEHICLE_MANUFACTURER_NAME, y=RATED_HORSEPOWER, label=RATED_HORSEPOWER),
#     stat="identity",
#     stat_params=list(colour="black"),
#     geom="text",
#     geom_params=list(angle=90),
#   )+
layer(data=df,
mapping=aes(yintercept = 32808, label="Average"),
geom="hline",
geom_params=list(colour="red")
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON' ), verbose = TRUE)));
# df <- car %>% group_by(VEHICLE_MANUFACTURER_NAME) %>% summarize(sum(RATED_HORSEPOWER))
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
#View(df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title="Horsepower by Manufactuer") +
labs(x="Vehicle Manufacturer Name", y="Rated Horsepower") +
#theme(axis.text.x = element_text(angle=90,hjust=1)) +
#  geom_text(data=car, label=(RATED_HORSEPOWER), angle=90) + # Still can't get the labels right
layer(data=car ,
mapping=aes(x=as.character(VEHICLE_MANUFACTURER_NAME), y=as.numeric(RATED_HORSEPOWER)), # Find out how to aggregate the horsepower by manufacturer name into averages
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue")
) +
#   layer (data=car,
#     mapping=aes(x=VEHICLE_MANUFACTURER_NAME, y=RATED_HORSEPOWER, label=RATED_HORSEPOWER),
#     stat="identity",
#     stat_params=list(colour="black"),
#     geom="text",
#     geom_params=list(angle=90),
#   )+
layer(data=df,
mapping=aes(yintercept = 32808, label="Average"),
geom="hline",
geom_params=list(colour="red")
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON' ), verbose = TRUE)));
# df <- car %>% group_by(VEHICLE_MANUFACTURER_NAME) %>% summarize(sum(RATED_HORSEPOWER))
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
#View(df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title="Horsepower by Manufactuer") +
labs(x="Vehicle Manufacturer Name", y="Rated Horsepower") +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
#  geom_text(data=car, label=(RATED_HORSEPOWER), angle=90) + # Still can't get the labels right
layer(data=car ,
mapping=aes(x=as.character(VEHICLE_MANUFACTURER_NAME), y=as.numeric(RATED_HORSEPOWER)), # Find out how to aggregate the horsepower by manufacturer name into averages
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue")
) +
#   layer (data=car,
#     mapping=aes(x=VEHICLE_MANUFACTURER_NAME, y=RATED_HORSEPOWER, label=RATED_HORSEPOWER),
#     stat="identity",
#     stat_params=list(colour="black"),
#     geom="text",
#     geom_params=list(angle=90),
#   )+
layer(data=df,
mapping=aes(yintercept = 32808, label="Average"),
geom="hline",
geom_params=list(colour="red")
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
car <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query="select * from CARS"')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_in2422', PASS='orcl_in2422', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON' ), verbose = TRUE)));
# df <- car %>% group_by(VEHICLE_MANUFACTURER_NAME) %>% summarize(sum(RATED_HORSEPOWER))
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
#View(df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title="Horsepower by Manufactuer") +
labs(x="Vehicle Manufacturer Name", y="Rated Horsepower") +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
#  geom_text(data=car, label=(RATED_HORSEPOWER), angle=90) + # Still can't get the labels right
layer(data=car ,
mapping=aes(x=as.character(VEHICLE_MANUFACTURER_NAME), y=as.numeric(RATED_HORSEPOWER)), # Find out how to aggregate the horsepower by manufacturer name into averages
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue")
) +
#   layer (data=car,
#     mapping=aes(x=VEHICLE_MANUFACTURER_NAME, y=RATED_HORSEPOWER, label=RATED_HORSEPOWER),
#     stat="identity",
#     stat_params=list(colour="black"),
#     geom="text",
#     geom_params=list(angle=90),
#   )+
layer(data=df,
mapping=aes(yintercept = 32808, label="Average"),
geom="hline",
geom_params=list(colour="red")
)
shiny::runApp('~/DataVisualization/DV_SProject/03 R SQL Visualizations/ShinyScatter')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
